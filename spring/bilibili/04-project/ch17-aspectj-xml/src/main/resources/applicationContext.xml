<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 声明数据源 DataSource -->
    <!-- druid配置参考：https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.pwd}" />
        <!-- Druid会自动跟url识别驱动类名，如果连接的数据库常见数据库，不需要配置driver -->
        <!-- <property name="driver" value="com.mysql.jdbc.Driver"/> -->
    </bean>

    <!-- 声明 SqlSessionFactionBean，用来创建SqlSessionFactory -->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>


    <!-- 声明MapperScannerConfigurer，扫描interface，创建dao，保存到Spring中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="factory"/>
        <property name="basePackage" value="com.bjpowernode.dao"/>
    </bean>

    <!-- 创建service -->
    <bean id="buyService" class="com.bjpowernode.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!-- 声明式事务：不用写代码 -->
    <!-- 1.声明事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!-- 2.声明业务方法的事务属性（隔离级别，传播行为，超时 -->
    <tx:advice id="serviceAdvice" transaction-manager="transactionManager">
        <!-- 给具体的业务方法，说明他需要的事务属性：哪些方法要添加事务？ -->
        <tx:attributes>
            <tx:method name="buy" isolation="DEFAULT" propagation="REQUIRED" timeout="20"
                rollback-for="java.lang.NullPointerException,com.bjpowernode.NotEnougthException"/>

            <!--在业务方法有命名规则后，可以对一些方法使用事务-->
            <tx:method name="add*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" rollback-for="java.lang.Exception"/>


            <!--声明切入点表达式：表示那些包中的类，类中的方法参与事务-->
            <!-- 以上方法以外的，query*,find* -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
            <!-- SUPPORTS：如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务 -->
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--
            所有serivce包和子包中的类中的方法都参与事务，例如：
             com.order.service.OrderService
             com.service.AppService
             com.bjpowernode.service.impl.BuyGoodsServiceImpl
            -->
        <aop:pointcut id="servicePointcut" expression="execution(* *..service..*(..))"/>
        <!--
            关联切入点表达式和事务的通知
            同时满足servicePointcut中的表示式  和 serviceAdvice中指定 的方法 将开启对应的事务
            -->
        <aop:advisor advice-ref="serviceAdvice" pointcut-ref="servicePointcut"/>
    </aop:config>
</beans>